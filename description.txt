Implement an abstract data type "Stack of long integers" (LIFO)
 using linkedlists.
String representation of a stack (provided by toString method)
 must be ordered from bottom to top (tos is the last element).
List of compulsory operations:
   Constructor for a new stack: LongStack()
   Copy of the stack: Object clone()
   Check whether the stack is empty: boolean stEmpty()
   Adding an element to the stack: void push (long a)
   Removing an element from the stack: long pop()
   Arithmetic operation s ( + - * / ) between two topmost elements
      of the stack (result is left on top): void op (String s)
   Reading the top without removing it: long tos()
   Check whether two stacks are equal: boolean equals (Object o)
   Conversion of the stack to string (top last): String toString()

Write a method
    public static long interpret (String pol)
 to calculate the value of an arithmetic expression pol in RPN
 (Reverse Polish Notation) using this stack type.
 Expression is a string which contains long integers (including negative
 and multi-digit numbers) and arithmetic operations + - * / separated
 by whitespace symbols. The result must be a long integer value
 of the expression or throwing a RuntimeException in case the expression
 is not correct. Expression is not correct if it is empty, contains
 illegal symbols, leaves redundant elements on top of stack or
 causes the stack underflow.
Example. LongStack.interpret ("2 15 -") should return -13 

Make sure that:
1. The solution uses a list, not an array. There must be no additional
 variable to hold the number of elements.
2. Instance variables are described by the keyword private,
 variable names start with a lowercase letter.
3. The methods pop, op, and tos check by themselves, that there are
 enough elements on the stack (for example, the method op requires
 two elements). If not enough, an exception must be thrown (this does
 not count that an exception occurs in the methods being called,
 throw a new exception with an appropriate error message).
4. The method op checks, among other things, the admissibility
 of the operation sign, in case of an error it reflects to the user
 an incorrect input in the error message. The op method is completely
 independent of the interpret method, while the interpret can catch
 the exceptions thrown by the op (but doesn't have to, it depends
 on your solution).
5. All exceptions must have an appropriate and informative error message,
 that provides full meaningful context and cause of the error in user terms.
6. The toString method should use a buffer (e.g. StringBuilder) in order
 to collect the result.
7. The method equals does not depend on the method toString.
8. The error handling of the method interpret must detect 4 types
 of errors in the parameter expression pol:
    a) no expression - the value is null, an empty string or a string
         consisting of whitespace symbols only,
    b) the expression contains too many numbers - e.g. "5 2 - 7",
    c) the expression contains an illegal symbol - e.g. "67 xxx +",
    d) the expression does not contain enough numbers to perform certain
         operation - for example "3 4 + - 5" (not enough numbers to perform -).
    Be sure to include the string pol that caused the error to an error message
     in its original form.
9. If any sources are used in the solution, they are cited.


